import debug from"debug";import pMap from"p-map";import cron from"node-cron";import fs from"fs-extra";import cheerio from"cheerio";import{stringify}from"querystring";import got from"got";import{URL}from"url";import{createWriteStream,unlinkSync}from"fs";class IProvider{scrapeConfig(t){throw new Error("Using default method: 'scrapeConfig'")}scrapeConfigs(){throw new Error("Using default method: 'scrapeConfigs'")}}var name="pop-api-scraper";class AbstractProvider extends IProvider{constructor(t,{name:e,configs:r,maxWebRequests:s=2}){super(),this.name=e||this.constructor.name,this.maxWebRequests=s,this.configs=r,this._debug=debug(`${name}:Provider`)}scrapeConfigs(){return pMap(this.configs,t=>(this._debug("Scraping configs: %o",t),this.scrapeConfig(t)),{concurrency:1})}}class Context{constructor(t=new IProvider){this.provider=t}execute(){return this.provider.scrapeConfigs()}}class Cron{constructor(t,{cronTime:e="0 0 */6 * * *",start:r=!1}={}){this.cronTime=e,this._debug=debug(`${name}:Cron`),t.cron=this.getCron(t,r)}getCron(t,e){return this._debug(`Starting cron at ${Date.now()}`),cron.schedule(this.cronTime,t.scraper.scrape,e)}}class PopApiScraper{constructor(t,{statusPath:e,updatedPath:r}){this.context=new Context,this.statusPath=e,this.updatedPath=r,this._debug=debug(`${name}:Scraper`),fs.createWriteStream(this.statusPath).end(),fs.createWriteStream(this.updatedPath).end(),t.scraper=this}getStatus(){return fs.readFile(this.statusPath,"utf8")}setStatus(t){return fs.writeFile(this.statusPath,t,"utf8")}getUpdated(){return fs.readFile(this.updatedPath,"utf8").then(t=>Number(t))}setUpdated(t){return fs.writeFile(this.updatedPath,String(t),"utf8")}static use(t,...e){if(PopApiScraper._installedPlugins.has(t))return this;const r="function"==typeof t?new t(this,...e):null;return r&&PopApiScraper._installedPlugins.set(t,r),this}async scrape(t=1){await this.setUpdated(Math.floor((new Date).getTime()/1e3));const e=PopApiScraper._installedPlugins.values(),r=await pMap(e,async t=>{this.context.provider=t;const e=`Scraping: ${t.name}`;return this._debug(e),await this.setStatus(e),this.context.execute()},{concurrency:t});return this._debug(`Finished scraping ${r.length}`),await this.setStatus("idle"),r}}PopApiScraper._installedPlugins=new Map;class IHttpService{get(t,e={},r=!1){throw new Error("Using default method: 'get'")}post(t,e={}){throw new Error("Using default method: 'post'")}put(t,e={}){throw new Error("Using default method: 'put'")}delete(t,e={}){throw new Error("Using default method: 'delete'")}download(t,e){throw new Error("Using default method: 'download'")}printDebug(t,e,r){throw new Error("Using default method: 'printDebug'")}request(t,e,r,s){throw new Error("Using default method: 'request'")}}class AbstractHttpService extends IHttpService{constructor({baseUrl:t,options:e={}}){super(),this.baseUrl=t,this.options=e,this._debug=debug(`${name}:Http`)}get(t="",e={},r=!1){return this.request("GET",t,e,r)}post(t,e={}){return this.request("POST",t,e)}put(t,e={}){return this.request("PUT",t,e)}delete(t,e={}){return this.request("DELETE",t,e)}handleBody(t,e){return e?t:cheerio.load(t)}printDebug(t,e,r){let s=`Making ${t} request to: ${e}`;if(r){const{body:t,query:e,form:i}=r,n=Object.assign({},t,e,i);s+=`?${stringify(n)}`}this._debug(s)}}class HttpService extends AbstractHttpService{request(t,e,r,s){const{href:i}=new URL(e,this.baseUrl),n=Object.assign({},this.options,r,{method:t});return this.printDebug(t,i,n),got(i,n).then(({body:t})=>this.handleBody(t,s))}download(t,e){const{href:r}=new URL(t,this.baseUrl);return this.printDebug("GET",r),new Promise((t,s)=>{const i=createWriteStream(e),n=got.stream(r,this.options);n.on("error",t=>{n.end(),i.end(()=>unlinkSync(e));const o=new Error(`Error on: '${e}', uri: '${r}', ${t}`);return s(o)}),n.on("response",function(){this.pipe(i),i.on("finish",()=>t(e))})})}}export{Context,Cron,PopApiScraper,AbstractHttpService,HttpService,IHttpService,AbstractProvider,IProvider};
